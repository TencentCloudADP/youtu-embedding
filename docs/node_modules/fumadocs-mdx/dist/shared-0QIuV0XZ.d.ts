import { StructuredData } from 'fumadocs-core/mdx-plugins';
import { TableOfContents } from 'fumadocs-core/server';
import { FC } from 'react';
import { MDXProps } from 'mdx/types';
import { E as ExtractedReference } from './define--6HQ1ehX.js';

interface FileInfo {
    /**
     * virtualized path for Source API
     */
    path: string;
    /**
     * the file path in file system
     */
    fullPath: string;
}
interface DocData {
    /**
     * Compiled MDX content (as component)
     */
    body: FC<MDXProps>;
    /**
     * table of contents generated from content.
     */
    toc: TableOfContents;
    /**
     * structured data for document search indexing.
     */
    structuredData: StructuredData;
    /**
     * Raw exports from the compiled MDX file.
     */
    _exports: Record<string, unknown>;
    /**
     * Last modified date of document file, obtained from version control.
     *
     * Only available when `lastModifiedTime` is enabled on global config.
     */
    lastModified?: Date;
    /**
     * extracted references (e.g. hrefs, paths), useful for analyzing relationships between pages.
     */
    extractedReferences?: ExtractedReference[];
}
interface DocMethods {
    /**
     * file info
     */
    info: FileInfo;
    /**
     * get document as text.
     *
     * - `type: raw` - read the original content from file system.
     * - `type: processed` - get the processed Markdown content, only available when `includeProcessedMarkdown` is enabled on collection config.
     */
    getText: (type: 'raw' | 'processed') => Promise<string>;
}
type MetaCollectionEntry<Data> = Data & {
    /**
     * file info
     */
    info: FileInfo;
};
type DocCollectionEntry<Frontmatter> = Override<DocData & DocMethods, Frontmatter>;
type AsyncDocCollectionEntry<Frontmatter> = Override<DocMethods & {
    load: () => Promise<DocData>;
}, Frontmatter>;
type Override<A, B> = Omit<A, keyof B> & B;

export type { AsyncDocCollectionEntry as A, DocCollectionEntry as D, FileInfo as F, MetaCollectionEntry as M };
